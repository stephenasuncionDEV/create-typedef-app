generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken  String    @unique
  userId        String    
  expires       DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  hash           String
  amount         Int
  price          String
  method         String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  address        String?    @unique
  guestId        String?    @unique
  wallet         String?    
  image          String     @default("https://ui-avatars.com/api/?name=U")
  points         Int        @default(0)
  role           String     @default("user")
  accounts       Account[]
  sessions       Session[]
  payments       Payment[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model VerificationToken {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier  String    @unique
  token       String    @unique
  expires     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([identifier, token])
}